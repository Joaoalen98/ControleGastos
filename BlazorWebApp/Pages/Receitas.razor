@page "/transacoes/receitas"

@inject MovimentacaoApiServico MovimentacaoApiServico
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime Js

<Modal @ref="modalAdd" Title="Adicionar Movimentação">
    <BodyTemplate>
        <FormAddMovimentacao EnviaMovimentacao="EnviaMovimentacao"
                             EnviandoForm="enviandoForm"
                             Model="modelNovaMovimentacao" />
    </BodyTemplate>
</Modal>

<Modal @ref="modalEditar" Title="Adicionar Movimentação">
    <BodyTemplate>
        <FormEditarMovimentacao EditarMovimentacao="EditaMovimentacao"
                                EnviandoForm="enviandoForm"
                                Model="modelMovimentacao" />
    </BodyTemplate>
</Modal>

<div class="container mt-3">
    <h3>Receitas</h3>

    @if (movimentacoes == null)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <div class="row">
            <div class="card col-md-4">
                <div class="card-header">
                    Recebidos
                    <i class="bi bi-arrow-up-circle-fill text-success"></i>
                </div>
                <div class="card-body">
                    <h5 class="card-title text-succes">@recebidos.ToString("c")</h5>
                </div>
            </div>
            <div class="card col-md-4">
                <div class="card-header">
                    Pendentes
                    <i class="bi bi-alarm-fill text-success"></i>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@pendentes.ToString("c")</h5>
                </div>
            </div>
            <div class="card col-md-4">
                <div class="card-header">
                    Total
                    <i class="bi bi-currency-dollar text-success"></i>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@total.ToString("c")</h5>
                </div>
            </div>
        </div>

        <div class="mt-3 mb-3">
            <button class="btn btn-success" @onclick="() => AbrirModal(modalAdd)">
                Nova Receita
            </button>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Data</th>
                    <th>Descrição</th>
                    <th>Categoria</th>
                    <th>Valor</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (movimentacoes.Count == 0)
                {
                    <tr>
                        <td colspan="5">Sem movimentações neste período.</td>
                    </tr>
                }
                else
                {
                    @foreach (var movimentacao in movimentacoes)
                    {
                        <tr>
                            <td>@movimentacao?.DataEntrada.ToString("dd/MM/yyyy")</td>
                            <td>@movimentacao?.Descricao</td>
                            <td>@movimentacao?.CategoriaReceita.GetDisplayName()</td>
                            <td>@movimentacao?.Valor.ToString("c")</td>
                            <td>
                                <button class="btn btn-success" @onclick="() => AbrirModalEdicao(movimentacao)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-danger" @onclick="() => DeletaMovimentacao(movimentacao.Id)">
                                    <i class="bi bi-trash3-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code {

    private Modal modalAdd = default!;
    private Modal modalEditar = default!;

    private NovaMovimentacaoDTO modelNovaMovimentacao = new NovaMovimentacaoDTO()
        {
            Valor = 0.00,
            DataEntrada = DateTime.Now,
            CategoriaReceita = CategoriaReceitaEnum.SALARIO,
        };
    private Movimentacao modelMovimentacao = new Movimentacao();

    private bool enviandoForm = false;
    private static int mes = DateTime.Now.Month;
    private static int ano = DateTime.Now.Year;
    private DateTime dataIncial = new DateTime(ano, mes, 1);
    private DateTime dataFinal = new DateTime(ano, mes, DateTime.DaysInMonth(ano, mes));
    private List<Movimentacao> movimentacoes;
    private double recebidos = 0.00;
    private double pendentes = 0.00;
    private double total = 0.00;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ObterMovimentacoes();
    }


    private async Task AbrirModalEdicao(Movimentacao movimentacao)
    {
        modelMovimentacao = movimentacao;
        await AbrirModal(modalEditar);
    }

    private async Task AbrirModal(Modal modal)
    {
        await modal.ShowAsync();
    }

    private async Task FecharModal(Modal modal)
    {
        await modal.HideAsync();
    }

    public async Task ObterMovimentacoes()
    {
        try
        {
            var movs = await MovimentacaoApiServico.ObterMovimentacoes(
            dataIncial, dataFinal, TipoMovimentacaoEnum.RECEITA
            );

            movimentacoes = movs.ToList();

            recebidos = movs.Where(x => x.DataEntrada <= DateTime.Now).Sum(x => x.Valor);
            pendentes = movs.Where(x => x.DataEntrada > DateTime.Now).Sum(x => x.Valor);
            total = movs.Sum(x => x.Valor);
        }
        catch (System.Exception ex)
        {

        }
    }

    private async Task EnviaMovimentacao()
    {
        enviandoForm = true;

        try
        {
            var state = await AuthProvider.GetAuthenticationStateAsync();
            modelNovaMovimentacao.UsuarioId = state.User.FindFirst("Id").Value;
            await MovimentacaoApiServico.Criar(modelNovaMovimentacao);
        }
        catch (ServicoException ex)
        {
            Console.WriteLine(ex.Data);
        }
        finally
        {
            await FecharModal(modalAdd);
            await ObterMovimentacoes();
            enviandoForm = false;
            StateHasChanged();
        }
    }

    private async Task EditaMovimentacao()
    {
        enviandoForm = true;
        try
        {
            await MovimentacaoApiServico.Editar(modelMovimentacao);
            await FecharModal(modalEditar);
            await ObterMovimentacoes();
            StateHasChanged();
        }
        catch (ServicoException ex)
        {
            Console.WriteLine(ex.Data);
        }
        finally
        {
            enviandoForm = false;
        }
    }

    private async Task DeletaMovimentacao(string id)
    {
        var confirmar = await Js.InvokeAsync<bool>("confirm", "Tem certeza que deseja deletar esta movimentação?");
        if (confirmar)
        {
            await MovimentacaoApiServico.Deletar(id);
            await ObterMovimentacoes();
            StateHasChanged();
        }
    }
}

