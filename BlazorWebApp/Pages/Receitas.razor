@page "/transacoes/receitas"

@inject MovimentacaoApiServico MovimentacaoApiServico
@inject AuthenticationStateProvider AuthProvider
@inject IDialogService DialogService
@inject IJSRuntime Js

<MudContainer Class="mt-3">
    <h3>Receitas</h3>

    @if (movimentacoes == null)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <div class="row">
            <div class="card col-md-4">
                <div class="card-header">
                    Recebidos
                    <i class="bi bi-arrow-up-circle-fill text-success"></i>
                </div>
                <div class="card-body">
                    <h5 class="card-title text-succes">@recebidos.ToString("c")</h5>
                </div>
            </div>
            <div class="card col-md-4">
                <div class="card-header">
                    Pendentes
                    <i class="bi bi-alarm-fill text-success"></i>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@pendentes.ToString("c")</h5>
                </div>
            </div>
            <div class="card col-md-4">
                <div class="card-header">
                    Total
                    <i class="bi bi-currency-dollar text-success"></i>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@total.ToString("c")</h5>
                </div>
            </div>
        </div>

        <div class="mt-3 mb-3">
            <MudButton @onclick="AbrirModalAdd" Variant="Variant.Filled" Color="Color.Success">
                Nova Receita
            </MudButton>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Data</th>
                    <th>Descrição</th>
                    <th>Categoria</th>
                    <th>Valor</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (movimentacoes.Count == 0)
                {
                    <tr>
                        <td colspan="5">Sem movimentações neste período.</td>
                    </tr>
                }
                else
                {
                    @foreach (var movimentacao in movimentacoes)
                    {
                        <tr>
                            <td>@movimentacao?.DataEntrada.ToString("dd/MM/yyyy")</td>
                            <td>@movimentacao?.Descricao</td>
                            <td>@movimentacao?.CategoriaReceita.GetDisplayName()</td>
                            <td>@movimentacao?.Valor.ToString("c")</td>
                            <td>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               OnClick="() => AbrirModalEditar(movimentacao)" />

                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Variant="Variant.Filled"
                                               Color="Color.Error"
                                               OnClick="() => DeletaMovimentacao(movimentacao.Id)" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</MudContainer>

@code {
    private bool carregando = false;

    private List<Movimentacao> movimentacoes;
    private static int mes = DateTime.Now.Month;
    private static int ano = DateTime.Now.Year;
    private DateTime dataIncial = new DateTime(ano, mes, 1);
    private DateTime dataFinal = new DateTime(ano, mes, DateTime.DaysInMonth(ano, mes));

    private double recebidos = 0.00;
    private double pendentes = 0.00;
    private double total = 0.00;

    protected override async Task OnInitializedAsync()
    {
        carregando = true;
        await base.OnInitializedAsync();
        await ObterMovimentacoes();
        carregando = false;
    }

    public async Task ObterMovimentacoes()
    {
        try
        {
            var movs = await MovimentacaoApiServico.ObterMovimentacoes(
            dataIncial, dataFinal, TipoMovimentacaoEnum.RECEITA
            );

            movimentacoes = movs.ToList();

            recebidos = movs.Where(x => x.DataEntrada <= DateTime.Now).Sum(x => x.Valor);
            pendentes = movs.Where(x => x.DataEntrada > DateTime.Now).Sum(x => x.Valor);
            total = movs.Sum(x => x.Valor);
        }
        catch (System.Exception ex)
        {

        }
    }

    private void AbrirModalAdd()
    {
        var parametros = new DialogParameters();
        parametros.Add("TipoMovimentacao", TipoMovimentacaoEnum.RECEITA);
        parametros.Add("OnClickCallback", EventCallback.Factory.Create<EventArgs>(this, ConcluiOperacao));

        var options = new DialogOptions();
        options.MaxWidth = MaxWidth.Medium;
        options.FullWidth = true;

        DialogService.Show<FormAddMovimentacao>("Adicionar Movimentação", parametros, options);
    }

    private void AbrirModalEditar(Movimentacao movimentacao)
    {
        var parametros = new DialogParameters();
        parametros.Add("TipoMovimentacao", TipoMovimentacaoEnum.RECEITA);
        parametros.Add("Movimentacao", movimentacao);
        parametros.Add("OnClickCallback", EventCallback.Factory.Create<EventArgs>(this, ConcluiOperacao));

        var options = new DialogOptions();
        options.MaxWidth = MaxWidth.Medium;
        options.FullWidth = true;

        DialogService.Show<FormEditarMovimentacao>("Editar Movimentação", parametros, options);
    }

    private async void ConcluiOperacao(EventArgs e)
    {
        Console.WriteLine("Hello");
        await ObterMovimentacoes();
        StateHasChanged();
    }

    private async Task DeletaMovimentacao(string id)
    {
        var confirmar = await Js.InvokeAsync<bool>("confirm", "Tem certeza que deseja deletar esta movimentação?");
        if (confirmar)
        {
            await MovimentacaoApiServico.Deletar(id);
            await ObterMovimentacoes();
            StateHasChanged();
        }
    }
}

